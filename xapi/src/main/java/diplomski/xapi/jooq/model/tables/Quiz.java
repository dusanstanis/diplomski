/*
 * This file is generated by jOOQ.
 */
package diplomski.xapi.jooq.model.tables;


import diplomski.xapi.jooq.model.Keys;
import diplomski.xapi.jooq.model.Public;
import diplomski.xapi.jooq.model.tables.records.QuizRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quiz extends TableImpl<QuizRecord> {

    private static final long serialVersionUID = -1318366261;

    /**
     * The reference instance of <code>public.QUIZ</code>
     */
    public static final Quiz QUIZ = new Quiz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizRecord> getRecordType() {
        return QuizRecord.class;
    }

    /**
     * The column <code>public.QUIZ.id</code>.
     */
    public final TableField<QuizRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.QUIZ</code> table reference
     */
    public Quiz() {
        this(DSL.name("QUIZ"), null);
    }

    /**
     * Create an aliased <code>public.QUIZ</code> table reference
     */
    public Quiz(String alias) {
        this(DSL.name(alias), QUIZ);
    }

    /**
     * Create an aliased <code>public.QUIZ</code> table reference
     */
    public Quiz(Name alias) {
        this(alias, QUIZ);
    }

    private Quiz(Name alias, Table<QuizRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quiz(Name alias, Table<QuizRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Quiz(Table<O> child, ForeignKey<O, QuizRecord> key) {
        super(child, key, QUIZ);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<QuizRecord> getPrimaryKey() {
        return Keys.QUIZ_PKEY;
    }

    @Override
    public List<UniqueKey<QuizRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizRecord>>asList(Keys.QUIZ_PKEY);
    }

    @Override
    public Quiz as(String alias) {
        return new Quiz(DSL.name(alias), this);
    }

    @Override
    public Quiz as(Name alias) {
        return new Quiz(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(String name) {
        return new Quiz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(Name name) {
        return new Quiz(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
