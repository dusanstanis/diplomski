/*
 * This file is generated by jOOQ.
 */
package diplomski.xapi.jooq.model.tables;


import diplomski.xapi.jooq.model.Keys;
import diplomski.xapi.jooq.model.Public;
import diplomski.xapi.jooq.model.tables.records.CoursePagesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoursePages extends TableImpl<CoursePagesRecord> {

    private static final long serialVersionUID = -967564022;

    /**
     * The reference instance of <code>public.COURSE_PAGES</code>
     */
    public static final CoursePages COURSE_PAGES = new CoursePages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursePagesRecord> getRecordType() {
        return CoursePagesRecord.class;
    }

    /**
     * The column <code>public.COURSE_PAGES.pageNumber</code>.
     */
    public final TableField<CoursePagesRecord, Integer> PAGENUMBER = createField(DSL.name("pageNumber"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.COURSE_PAGES.dataText</code>.
     */
    public final TableField<CoursePagesRecord, String> DATATEXT = createField(DSL.name("dataText"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.COURSE_PAGES.courseId</code>.
     */
    public final TableField<CoursePagesRecord, String> COURSEID = createField(DSL.name("courseId"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.COURSE_PAGES</code> table reference
     */
    public CoursePages() {
        this(DSL.name("COURSE_PAGES"), null);
    }

    /**
     * Create an aliased <code>public.COURSE_PAGES</code> table reference
     */
    public CoursePages(String alias) {
        this(DSL.name(alias), COURSE_PAGES);
    }

    /**
     * Create an aliased <code>public.COURSE_PAGES</code> table reference
     */
    public CoursePages(Name alias) {
        this(alias, COURSE_PAGES);
    }

    private CoursePages(Name alias, Table<CoursePagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoursePages(Name alias, Table<CoursePagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CoursePages(Table<O> child, ForeignKey<O, CoursePagesRecord> key) {
        super(child, key, COURSE_PAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<CoursePagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoursePagesRecord, ?>>asList(Keys.COURSE_PAGES__FCOURSE);
    }

    public Course course() {
        return new Course(this, Keys.COURSE_PAGES__FCOURSE);
    }

    @Override
    public CoursePages as(String alias) {
        return new CoursePages(DSL.name(alias), this);
    }

    @Override
    public CoursePages as(Name alias) {
        return new CoursePages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoursePages rename(String name) {
        return new CoursePages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoursePages rename(Name name) {
        return new CoursePages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
