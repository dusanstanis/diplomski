/*
 * This file is generated by jOOQ.
 */
package diplomski.xapi.jooq.model.tables.records;


import diplomski.xapi.jooq.model.tables.User;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends TableRecordImpl<UserRecord> implements Record2<String[], String[]> {

    private static final long serialVersionUID = 1172846102;

    /**
     * Setter for <code>public.USER.id</code>.
     */
    public void setId(String[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.USER.id</code>.
     */
    public String[] getId() {
        return (String[]) get(0);
    }

    /**
     * Setter for <code>public.USER.phoneNumber</code>.
     */
    public void setPhonenumber(String[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.USER.phoneNumber</code>.
     */
    public String[] getPhonenumber() {
        return (String[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String[], String[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String[], String[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String[]> field1() {
        return User.USER.ID;
    }

    @Override
    public Field<String[]> field2() {
        return User.USER.PHONENUMBER;
    }

    @Override
    public String[] component1() {
        return getId();
    }

    @Override
    public String[] component2() {
        return getPhonenumber();
    }

    @Override
    public String[] value1() {
        return getId();
    }

    @Override
    public String[] value2() {
        return getPhonenumber();
    }

    @Override
    public UserRecord value1(String[] value) {
        setId(value);
        return this;
    }

    @Override
    public UserRecord value2(String[] value) {
        setPhonenumber(value);
        return this;
    }

    @Override
    public UserRecord values(String[] value1, String[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(String[] id, String[] phonenumber) {
        super(User.USER);

        set(0, id);
        set(1, phonenumber);
    }
}
